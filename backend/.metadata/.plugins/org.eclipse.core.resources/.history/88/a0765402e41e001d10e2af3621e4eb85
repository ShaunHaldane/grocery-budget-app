package com.shaunhaldane.grocerybudgetappbackend.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.shaunhaldane.grocerybudgetappbackend.DTO.AnnualCostsDTO;
import com.shaunhaldane.grocerybudgetappbackend.DTO.TotalSpendOnIndividualItemDTO;
import com.shaunhaldane.grocerybudgetappbackend.model.Item;

@Repository
public interface ItemRepository extends JpaRepository<Item, Long>{
	
	Optional<Item> findByUserIdAndId(Long userId, Long itemId);

	Item updateItem(Long id, Item item);
	
	@Query("SELECT i from Item i WHERE i.disposalType = 'NONE' and i.user.id = :userId")
	List<Item> getAllItemsInStock(@Param("userId") Long userId);

	@Query("SELECT new com.shaunhaldane.grocerybudgetappbackend.DTO.AnnualCostsDTO(SUM(i.price), "
			+ "EXTRACT(month from i.datePurchased) as month, "
			+ "EXTRACT(year from i.datePurchased) as year) "
			+ "FROM Item i "
			+ "WHERE EXTRACT(year from i.datePurchased) = :year and i.user.id = :userId "
			+ "group by month, year")
	List<AnnualCostsDTO> getTotalSpentPerMonthForYear(@Param("year") int year, @Param("userId") Long userId);
	
	@Query("SELECT new com.shaunhaldane.grocerybudgetappbackend.DTO.AnnualCostsDTO(SUM(i.price), "
			+ "EXTRACT(month from i.datePurchased) as month, "
			+ "EXTRACT(year from i.datePurchased) as year) "
			+ "FROM Item i "
			+ "WHERE EXTRACT(year from i.datePurchased) = :year and i.user.id = :userId "
			+ "and i.disposalType = 'WASTED' "
			+ "group by month, year")
	List<AnnualCostsDTO> getTotalWastedPerMonthForYear(@Param("year") int year, @Param("userId") Long userId);
	
	@Query("SELECT new com.shaunhaldane.grocerybudgetappbackend.DTO.AnnualCostsDTO(SUM(i.price), "
			+ "EXTRACT(month from i.datePurchased) as month, "
			+ "EXTRACT(year from i.datePurchased) as year) "
			+ "FROM Item i "
			+ "WHERE EXTRACT(year from i.datePurchased) = :year and i.user.id = :userId "
			+ "and i.disposalType = 'USED' "
			+ "group by month, year")
	List<AnnualCostsDTO> getTotalUsedPerMonthForYear(@Param("year") int year, @Param("userId") Long userId);
	
	@Query("SELECT new com.shaunhaldane.grocerybudgetappbackend.DTO.TotalSpendOnIndividualItemDTO(SUM(i.price), "
			+ "i.name) "
			+ "FROM Item i WHERE i.user.id = :userId "
			+ "group by i.name")
	List<TotalSpendOnIndividualItemDTO> getTotalSpentForAllItems(@Param("userId") Long userId);
	
	@Query("SELECT new com.shaunhaldane.grocerybudgetappbackend.DTO.TotalSpendOnIndividualItemDTO(SUM(i.price), "
			+ "i.name) "
			+ "FROM Item i "
			+ "WHERE i.disposalType = 'WASTED' and i.user.id = :userId "
			+ "group by i.name")
	List<TotalSpendOnIndividualItemDTO> getTotalWastedForAllItems(@Param("userId") Long userId);
	
	@Query("SELECT new com.shaunhaldane.grocerybudgetappbackend.DTO.TotalSpendOnIndividualItemDTO(SUM(i.price), "
			+ "i.name) "
			+ "FROM Item i "
			+ "WHERE i.disposalType = 'USED' and i.user.id = :userId "
			+ "group by i.name")
	List<TotalSpendOnIndividualItemDTO> getTotalUsedForAllItems(@Param("userId") Long userId);

}
